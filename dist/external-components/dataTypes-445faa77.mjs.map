{"version":3,"file":"dataTypes-445faa77.mjs","sources":["../../src/services/api/base.ts","../../src/services/api/DataHub/base.ts","../../src/services/api/DataHub/Dimensions/Dimensions.ts","../../src/services/api/Currency/base.ts","../../src/services/api/Currency/CurrencyController/CurrencyController.ts","../../src/stores/dataTypes.ts"],"sourcesContent":["export const BASE_API = \"Actindo.Modules.Actindo.\";\n","import { BASE_API as ROOT_API } from \"../base\";\n\nexport const BASE_API = `${ROOT_API}DataHub.`;\n","import {\n  httpClient,\n  type IApiPayload,\n  type IDataTableQuery,\n  type IDataFetcherResponse,\n} from \"@actindo/core-ui\";\n\nimport { BASE_API } from \"../base\";\nimport type { ITenantDimension } from \".\";\n\nconst MODULE_BASE_API = `${BASE_API}Dimensions.`;\n\nexport const dimensionsApi = {\n  /** List etl processes */\n  async getList(\n    query?: IDataTableQuery,\n  ): Promise<IDataFetcherResponse<ITenantDimension>> {\n    return httpClient.post(`${MODULE_BASE_API}get`, query);\n  },\n  /** create entity */\n  async getOne(id: number): Promise<IApiPayload<ITenantDimension>> {\n    return httpClient.post(`${MODULE_BASE_API}getOne`, { id });\n  },\n};\n","import { BASE_API as ROOT_API } from \"../base\";\n\nexport const BASE_API = `${ROOT_API}Currency.`;\n","import { httpClient, type IDataFetcherResponse } from \"@actindo/core-ui\";\n\nimport { BASE_API } from \"../base\";\nimport { ICurrency } from \".\";\n\nconst MODULE_BASE_API = `${BASE_API}CurrencyController.`;\n\nexport const currencyControllerApi = {\n  async listCurrencies(): Promise<IDataFetcherResponse<ICurrency>> {\n    return httpClient.post(`${MODULE_BASE_API}listCurrencies`);\n  },\n};\n","import { defineStore } from \"pinia\";\nimport type { AxiosError } from \"axios\";\nimport type { IDataFetcherResponse } from \"@actindo/core-ui\";\nimport {\n  dimensionsApi,\n  type ITenantDimension,\n} from \"@/services/api/DataHub/Dimensions\";\nimport {\n  currencyControllerApi,\n  type ICurrency,\n} from \"@/services/api/Currency/CurrencyController\";\n\ninterface IDataTypesState {\n  currencies: ICurrency[];\n  isCurrenciesLoading: boolean;\n  isCurrenciesFetching?: Promise<IDataFetcherResponse<ICurrency>>;\n\n  dimensions: ITenantDimension[];\n  isDimensionsLoading: boolean;\n  isDimensionsFetching?: Promise<IDataFetcherResponse<ITenantDimension>>;\n}\n\nconst initialState = (): IDataTypesState => ({\n  currencies: [],\n  isCurrenciesLoading: false,\n  isCurrenciesFetching: undefined,\n\n  dimensions: [],\n  isDimensionsLoading: false,\n  isDimensionsFetching: undefined,\n});\n\nexport const useDataTypesStore = defineStore(\"dataTypes\", {\n  state: initialState,\n  actions: {\n    async fetchDimensions() {\n      if (this.dimensions.length) {\n        return;\n      }\n\n      try {\n        this.isDimensionsLoading = true;\n        if (!this.isDimensionsFetching) {\n          this.isDimensionsFetching = dimensionsApi.getList();\n        }\n        const { data } = await this.isDimensionsFetching;\n        this.dimensions = data;\n        this.isDimensionsFetching = undefined;\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.log((err as AxiosError).message);\n      } finally {\n        this.isDimensionsLoading = false;\n      }\n    },\n\n    async fetchCurrencies() {\n      if (this.currencies.length) {\n        return;\n      }\n\n      try {\n        this.isCurrenciesLoading = true;\n        if (!this.isCurrenciesFetching) {\n          this.isCurrenciesFetching = currencyControllerApi.listCurrencies();\n        }\n        const { data } = await this.isCurrenciesFetching;\n        this.currencies = data;\n        this.isCurrenciesFetching = undefined;\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.log((err as AxiosError).message);\n      } finally {\n        this.isCurrenciesLoading = false;\n      }\n    },\n  },\n});\n"],"names":["BASE_API","ROOT_API","httpClient","MODULE_BASE_API"],"mappings":"AAAO,MAAMA,aAAW;ACEX,MAAAA,aAAW,GAAGC,UAAQ;ACFnC,MAAAC,eAAA,OAAA,eAAA,EAAA;AAUA,MAAMC,oBAAkB,GAAGH,UAAQ;AAE5B,MAAM,gBAAgB;AAAA;AAAA,EAE3B,MAAM,QACJ,OACiD;AACjD,WAAOE,aAAW,KAAK,GAAGC,iBAAe,OAAO,KAAK;AAAA,EACvD;AAAA;AAAA,EAEA,MAAM,OAAO,IAAoD;AAC/D,WAAOD,aAAW,KAAK,GAAGC,iBAAe,UAAU,EAAE,IAAI;AAAA,EAC3D;AACF;ACrBa,MAAA,WAAW,GAAGF,UAAQ;ACFnC,MAAA,aAAA,OAAA,eAAA,EAAA;AAKA,MAAM,kBAAkB,GAAG,QAAQ;AAE5B,MAAM,wBAAwB;AAAA,EACnC,MAAM,iBAA2D;AAC/D,WAAO,WAAW,KAAK,GAAG,eAAe,gBAAgB;AAAA,EAC3D;AACF;ACXA,MAAA,cAAA,OAAA,OAAA,EAAA;AAsBA,MAAM,eAAe,OAAwB;AAAA,EAC3C,YAAY,CAAC;AAAA,EACb,qBAAqB;AAAA,EACrB,sBAAsB;AAAA,EAEtB,YAAY,CAAC;AAAA,EACb,qBAAqB;AAAA,EACrB,sBAAsB;AACxB;AAEa,MAAA,oBAAoB,YAAY,aAAa;AAAA,EACxD,OAAO;AAAA,EACP,SAAS;AAAA,IACP,MAAM,kBAAkB;AAClB,UAAA,KAAK,WAAW,QAAQ;AAC1B;AAAA,MACF;AAEI,UAAA;AACF,aAAK,sBAAsB;AACvB,YAAA,CAAC,KAAK,sBAAsB;AACzB,eAAA,uBAAuB,cAAc;QAC5C;AACA,cAAM,EAAE,KAAA,IAAS,MAAM,KAAK;AAC5B,aAAK,aAAa;AAClB,aAAK,uBAAuB;AAAA,eACrB,KAAK;AAEJ,gBAAA,IAAK,IAAmB,OAAO;AAAA,MAAA,UACvC;AACA,aAAK,sBAAsB;AAAA,MAC7B;AAAA,IACF;AAAA,IAEA,MAAM,kBAAkB;AAClB,UAAA,KAAK,WAAW,QAAQ;AAC1B;AAAA,MACF;AAEI,UAAA;AACF,aAAK,sBAAsB;AACvB,YAAA,CAAC,KAAK,sBAAsB;AACzB,eAAA,uBAAuB,sBAAsB;QACpD;AACA,cAAM,EAAE,KAAA,IAAS,MAAM,KAAK;AAC5B,aAAK,aAAa;AAClB,aAAK,uBAAuB;AAAA,eACrB,KAAK;AAEJ,gBAAA,IAAK,IAAmB,OAAO;AAAA,MAAA,UACvC;AACA,aAAK,sBAAsB;AAAA,MAC7B;AAAA,IACF;AAAA,EACF;AACF,CAAC;"}