{"version":3,"file":"select-de5f3f6d.mjs","sources":["../src/components/ui-package/ABtn/ABtn.vue","../src/components/ui-package/constants.ts","../src/components/ui-package/use/units.ts","../src/components/ui-package/ASkeletonLoader/ASkeletonLoader.vue","../src/components/ui-package/AAutocomplete/AAutocomplete.vue","../src/components/ui-package/use/color.ts","../src/components/ui-package/ACheckbox/ACheckbox.vue","../src/components/ui-package/ACombobox/ACombobox.vue","../src/components/ui-package/ACreateBtn/ACreateBtn.vue","../src/components/ui-package/ADialog/ABaseDialog.vue","../src/components/ui-package/ADropdown/ADropdown.vue","../src/components/ui-package/AIcon/AIcon.vue","../src/components/ui-package/AFlag/AFlag.vue","../src/components/ui-package/APagination/APaginationBar.vue","../src/components/ui-package/ATextField/ATextField.vue","../src/components/ui-package/APasswordField/APasswordField.vue","../src/components/ui-package/ARadio/ARadio.vue","../src/components/ui-package/ASelect/ASelect.vue","../src/components/ui-package/ASnackbar/ASnackbars.vue","../src/components/ui-package/ATextarea/ATextarea.vue","../src/components/ui-package/use/select.ts"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed } from \"vue\";\nimport { ASkeletonLoader, AProgressCircular } from \"../index\";\n\nconst props = withDefaults(\n  defineProps<{\n    showSkeleton?: boolean;\n    loading?: boolean;\n    icon?: boolean | string;\n    disabled?: boolean;\n    /** button will be focused if placed as action within ABaseDialog */\n    cta?: boolean;\n  }>(),\n  {\n    showSkeleton: false,\n    loading: false,\n    icon: undefined,\n    disabled: false,\n    cta: false,\n  },\n);\n\nconst isSpinnerLoading = computed(\n  () => !props.disabled && props.loading && !props.showSkeleton,\n);\n\nfunction handleClick(event: MouseEvent) {\n  if (isSpinnerLoading.value) {\n    event.stopPropagation();\n  }\n}\n</script>\n\n<template>\n  <v-btn\n    class=\"a-btn\"\n    :icon=\"icon\"\n    :loading=\"!disabled && showSkeleton\"\n    :disabled=\"disabled\"\n    :class=\"{ 'a-btn__cta': cta }\"\n    @click.capture=\"handleClick\"\n  >\n    <template v-if=\"isSpinnerLoading\" #prepend>\n      <AProgressCircular size=\"23\" width=\"2\" indeterminate />\n    </template>\n\n    <template v-if=\"showSkeleton\" #loader>\n      <ASkeletonLoader :type=\"icon ? 'icon' : 'block'\" />\n    </template>\n\n    <template v-for=\"(_, slot) of $slots\" #[slot]=\"scope\">\n      <slot :key=\"slot\" :name=\"slot\" v-bind=\"scope\" />\n    </template>\n  </v-btn>\n</template>\n\n<style lang=\"scss\">\n.a-btn.v-btn {\n  letter-spacing: inherit;\n\n  .v-icon {\n    --v-icon-size-multiplier: 1;\n  }\n  .v-btn__content {\n    white-space: unset;\n  }\n  &:not(&--icon) {\n    &.v-btn--size-x-large {\n      --v-btn-size: 1.5rem;\n      --v-btn-height: 56px;\n      padding-top: 14px;\n      padding-bottom: 14px;\n    }\n  }\n\n  &--variant-flat,\n  &--variant-elevated {\n    color: rgba(var(--v-theme-primary));\n  }\n\n  &--icon {\n    --v-btn-height: 28px;\n\n    &.v-btn--size-x-large {\n      --v-btn-height: 44px;\n      --v-btn-size: 1rem;\n    }\n  }\n\n  &:disabled,\n  &.v-btn--disabled {\n    opacity: 1;\n    cursor: not-allowed;\n\n    &.v-btn--variant-elevated,\n    &.v-btn--variant-flat {\n      background-color: rgb(var(--v-theme-disabled)) !important;\n      color: rgb(var(--v-theme-surface));\n    }\n\n    &.v-btn--variant-outlined {\n      border-color: rgb(var(--v-theme-disabled)) !important;\n    }\n\n    &.v-btn--variant-outlined,\n    &.v-btn--variant-text {\n      color: rgb(var(--v-theme-disabled)) !important;\n    }\n\n    .v-btn__overlay,\n    .v-btn__underlay {\n      opacity: 0;\n    }\n  }\n\n  &.gradient_2 {\n    background: $gradient_2;\n    color: #fff;\n\n    &.v-btn--disabled {\n      background: $disabled;\n    }\n  }\n}\n</style>\n","import { reactive } from \"vue\";\n\nexport const MESSAGES = reactive({\n  MANDATORY_FIELD: \"Field is empty\",\n  LIST_IS_EMPTY: \"Sorry, we cannot not show any options\",\n  SEARCH_LABEL: \"Search\",\n  OF: \"of\",\n  PAGES: \"pages\",\n});\n\nexport enum NotificationType {\n  success = \"primary\",\n  error = \"error\",\n}\n","export const withUnit = (size: string): string => {\n  const lastChar = size[size.length - 1];\n\n  return lastChar >= \"0\" && lastChar <= \"9\" ? `${size}px` : size;\n};\n","<script setup lang=\"ts\">\nimport { computed } from \"vue\";\nimport { withUnit } from \"../use/units\";\n\nconst props = withDefaults(\n  defineProps<{\n    type?: string;\n    width?: string | number;\n    height?: string | number;\n    loading?: boolean;\n    tag?: string;\n  }>(),\n  {\n    type: \"block\",\n    width: \"\",\n    height: \"\",\n    loading: true,\n    tag: \"div\",\n  },\n);\n\nconst style = computed(() => {\n  const style: Record<string, string | number> = {};\n  if (props.width) {\n    style[\"--skeleton-width\"] = withUnit(String(props.width));\n  }\n  if (props.height) {\n    style[\"--skeleton-height\"] = withUnit(String(props.height));\n  }\n  return style;\n});\n\n// @todo: Not ready on Vuetify\n// <v-skeleton-loader>\n//   <template v-for=\"(_, slot) of $slots\" #[slot]=\"scope\">\n//     <slot :key=\"slot\" :name=\"slot\" v-bind=\"scope\" />\n//   </template>\n// <v-skeleton-loader>\n</script>\n\n<template>\n  <component\n    :is=\"tag\"\n    v-if=\"loading\"\n    class=\"a-skeleton-loader v-skeleton-loader\"\n    :class=\"`a-skeleton-loader__${type}`\"\n    :style=\"style\"\n  />\n  <slot v-else />\n</template>\n\n<style lang=\"scss\">\n.a-skeleton-loader {\n  &__block {\n    --skeleton-width: 100%;\n    --skeleton-height: 100%;\n    --border-radius: 4px;\n  }\n\n  &__icon {\n    --skeleton-width: 24px;\n    --skeleton-height: 24px;\n    --border-radius: 50%;\n  }\n\n  --v-theme-surface: var(--v-theme-skeleton);\n  position: relative;\n  width: var(--skeleton-width, 100%);\n  height: var(--skeleton-height, 100%);\n  border-radius: var(--border-radius, 4px);\n  overflow: hidden;\n  background: rgb(var(--v-theme-skeleton));\n\n  &:after {\n    content: \"\";\n    position: absolute;\n    height: 100%;\n    left: 0;\n    right: 0;\n    top: 0;\n    z-index: 1;\n    animation: skeleton-loading 1.5s infinite;\n    transform: translateX(-100%);\n    background: $skeleton_animation_light;\n  }\n}\n\n.v-theme--dark {\n  .a-skeleton-loader {\n    &:after {\n      background: $skeleton_animation_dark;\n    }\n  }\n}\n\n@keyframes skeleton-loading {\n  100% {\n    transform: translateX(100%);\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed } from \"vue\";\nimport { MESSAGES } from \"../constants\";\nimport ASkeletonLoader from \"../ASkeletonLoader/ASkeletonLoader.vue\";\n\nconst props = withDefaults(\n  defineProps<{\n    color?: string;\n    density?: string;\n    hideDetails?: boolean | \"auto\";\n    readonly?: boolean;\n    transparent?: boolean;\n    variant?: string;\n    placeholder?: string;\n    persistentPlaceholder?: boolean;\n    required?: boolean;\n    hideMandatory?: boolean;\n    changed?: boolean;\n    loading?: boolean;\n  }>(),\n  {\n    color: \"accent\",\n    density: \"compact\",\n    hideDetails: \"auto\",\n    variant: \"outlined\",\n    readonly: false,\n    placeholder: \"\",\n    persistentPlaceholder: false,\n    required: false,\n    hideMandatory: false,\n    changed: false,\n    loading: false,\n  },\n);\n\nconst updatedProps = computed(() => ({\n  class: [\n    \"a-autocomplete.a-input\",\n    {\n      \"v-input--filled\": !props.transparent,\n      \"a-input--changed\": props.changed,\n      \"a-input--required\":\n        !props.hideMandatory && props.required && !props.readonly,\n    },\n  ],\n  color: props.color,\n  density: props.density,\n  readonly: props.readonly,\n  variant: props.readonly ? \"plain\" : props.variant,\n  placeholder: props.readonly ? MESSAGES.MANDATORY_FIELD : props.placeholder,\n  persistentPlaceholder: props.readonly || props.persistentPlaceholder,\n}));\n</script>\n<template>\n  <div v-if=\"loading\">\n    <ASkeletonLoader\n      :class=\"`a-input--skeleton-${density}`\"\n      class=\"a-input v-input\"\n    />\n  </div>\n  <v-autocomplete v-else v-bind=\"updatedProps\">\n    <template v-for=\"(_, slot) of $slots\" #[slot]=\"scope\">\n      <slot :key=\"slot\" :name=\"slot\" v-bind=\"scope\" />\n    </template>\n  </v-autocomplete>\n</template>\n<style lang=\"scss\">\n.v-autocomplete__mask {\n  color: rgb(var(--v-theme-field_color));\n}\n.v-menu .v-overlay__content.v-autocomplete__content > .v-list {\n  background: rgb(var(--v-theme-on-background));\n\n  & > .v-list-item {\n    color: rgb(var(--v-theme-on_dark));\n\n    &:hover,\n    &--active {\n      background: rgb(var(--v-theme-hover_positive_secondary_3));\n    }\n  }\n}\n</style>\n","import { computed } from \"vue\";\n\ninterface IInputProps {\n  disabled?: boolean;\n  readonly?: boolean;\n  rounded?: boolean;\n  modelValue?: boolean;\n  indeterminate?: boolean;\n}\n\nexport const useInputColor = (props: IInputProps) => {\n  return computed(() => {\n    if (props.disabled) {\n      return \"disabled\";\n    }\n\n    if (props.readonly) {\n      return !props.modelValue && props.rounded && !props.indeterminate\n        ? \"background\"\n        : \"checkbox_icon\";\n    }\n\n    if (\n      props.indeterminate ||\n      (props.modelValue && !props.rounded) ||\n      (!props.modelValue && props.rounded)\n    ) {\n      return \"primary\";\n    }\n\n    return \"checkbox_icon\";\n  });\n};\n\nexport const useInputBgColor = (props: IInputProps) => {\n  return computed(() => {\n    if (!props.disabled && props.rounded && !props.indeterminate) {\n      if (props.modelValue) {\n        return \"linear-gradient(90deg, #00efbf 0%, #00daee 100%)\";\n      }\n      return props.readonly\n        ? \"rgba(var(--v-theme-on-background))\"\n        : \"transparent\";\n    }\n\n    return \"transparent\";\n  });\n};\n","<script setup lang=\"ts\">\nimport { computed, useModel } from \"vue\";\nimport ASkeletonLoader from \"../ASkeletonLoader/ASkeletonLoader.vue\";\nimport { useInputColor, useInputBgColor } from \"../use/color\";\n\nconst props = withDefaults(\n  defineProps<{\n    hideDetails?: boolean | \"auto\";\n    density?: string;\n    readonly?: boolean;\n    disabled?: boolean;\n    modelValue?: boolean;\n    indeterminate?: boolean;\n    rounded?: boolean;\n    loading?: boolean;\n    label?: string;\n  }>(),\n  {\n    density: \"compact\",\n    hideDetails: \"auto\",\n    disabled: false,\n    modelValue: false,\n    indeterminate: false,\n    rounded: false,\n    loading: false,\n    label: undefined,\n  },\n);\n\ndefineEmits<{\n  (event: \"update:modelValue\", value: boolean): void;\n}>();\n\nconst value = useModel(props, \"modelValue\");\n\nconst color = useInputColor(props);\nconst bgColor = useInputBgColor(props);\n\nconst updatedProps = computed(() => ({\n  ...props,\n  class: [\n    \"a-checkbox\",\n    {\n      \"a-checkbox--checked\": props.modelValue,\n      \"a-checkbox--rounded\": props.rounded,\n    },\n  ],\n  trueIcon: props.readonly || props.rounded ? \"done\" : undefined,\n  falseIcon: props.readonly\n    ? \"clear\"\n    : props.rounded\n      ? \"radio_button_unchecked\"\n      : undefined,\n}));\n</script>\n<template>\n  <div v-if=\"loading\" class=\"a-input--skeleton-compact d-flex align-center\">\n    <ASkeletonLoader width=\"18px\" height=\"18px\" class=\"a-input v-input\" />\n    <ASkeletonLoader v-if=\"label\" height=\"18px\" class=\"a-input v-input ml-2\" />\n  </div>\n  <v-checkbox\n    v-else\n    v-model=\"value\"\n    v-bind=\"updatedProps\"\n    :style=\"`--icon-color: var(--v-theme-${color});--icon-background: ${bgColor};`\"\n  >\n    <template v-for=\"(_, slot) of $slots\" #[slot]=\"scope\">\n      <slot :key=\"slot\" :name=\"slot\" v-bind=\"scope\" />\n    </template>\n  </v-checkbox>\n</template>\n<style lang=\"scss\">\n.a-checkbox {\n  .v-icon {\n    color: rgba(var(--icon-color));\n  }\n\n  &--rounded {\n    .v-icon {\n      border-radius: 50%;\n      background: var(--icon-background);\n    }\n  }\n\n  .v-selection-control {\n    --v-selection-control-size: 40px;\n\n    .v-label,\n    &__input > .v-icon,\n    &--disabled {\n      opacity: 1;\n    }\n  }\n}\n</style>\n","<script setup lang=\"ts\">\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { computed } from \"vue\";\nimport {\n  ASkeletonLoader,\n  AChip,\n  AListItem,\n  AListItemTitle,\n  useSelect,\n  type IListProps,\n  type IItem,\n} from \"../index\";\n\ninterface IComboboxProps extends IListProps {\n  color?: string;\n  density?: \"default\" | \"comfortable\" | \"compact\";\n  readonly?: boolean;\n  transparent?: boolean;\n  variant?:\n    | \"outlined\"\n    | \"plain\"\n    | \"underlined\"\n    | \"filled\"\n    | \"solo\"\n    | \"solo-inverted\"\n    | \"solo-filled\";\n  placeholder?: string;\n  persistentPlaceholder?: boolean;\n  required?: boolean;\n  hideMandatory?: boolean;\n  hideNoData?: boolean;\n  hideDetails?: boolean | string;\n  changed?: boolean;\n  loading?: boolean;\n  multiple?: boolean;\n  chips?: boolean;\n  modelValue?: any;\n  items?: IItem[];\n  itemTitle?: string;\n  itemValue?: string;\n  noDataText?: string;\n  returnObject?: boolean;\n  menu?: boolean;\n}\n\nconst props = withDefaults(defineProps<IComboboxProps>(), {\n  color: \"accent\",\n  density: \"compact\",\n  readonly: false,\n  variant: \"outlined\",\n  placeholder: \"\",\n  persistentPlaceholder: false,\n  required: false,\n  hideMandatory: false,\n  hideNoData: false,\n  hideDetails: \"auto\",\n  changed: false,\n  loading: false,\n  multiple: false,\n  chips: false,\n  modelValue: \"\",\n  items: () => [],\n  itemTitle: \"title\",\n  itemValue: \"value\",\n  noDataText: undefined,\n  returnObject: false,\n  menu: false,\n});\n\nconst emit = defineEmits<{\n  (event: \"update:modelValue\", value: any): void;\n  (event: \"update:menu\", value: boolean): void;\n}>();\n\nconst {\n  localMenu,\n  selection,\n  slotsList,\n  slots,\n  showChips,\n  updatedProps,\n\n  getItemTitle,\n  removeItem,\n  updateSelection,\n  selectedItems,\n} = useSelect(props, emit, \"a-combobox\");\n\nconst showPrependSlot = computed(\n  () => Boolean(slotsList[\"prepend-item\"]) || showChips.value,\n);\nconst showAppendSlot = computed(() => Boolean(slotsList[\"append-item\"]));\n</script>\n\n<template>\n  <div v-if=\"loading\">\n    <ASkeletonLoader\n      :class=\"`a-input v-input a-combobox a-input--skeleton-${density}`\"\n    />\n  </div>\n\n  <v-combobox\n    v-else\n    v-bind=\"updatedProps\"\n    @update:model-value=\"updateSelection\"\n    @update:menu=\"localMenu = $event\"\n  >\n    <template v-if=\"showPrependSlot\" #prepend-item>\n      <div class=\"a-list-item__sticky a-list-item__skipped\">\n        <slot name=\"prepend-item\" />\n\n        <AListItem v-if=\"showChips\">\n          <AListItemTitle class=\"a-combobox__selected-chips\">\n            <AChip\n              v-for=\"selected of selectedItems\"\n              :key=\"selected\"\n              size=\"small\"\n              closable\n              @click:close=\"removeItem(selected)\"\n            >\n              {{ getItemTitle(selected) }}\n            </AChip>\n          </AListItemTitle>\n        </AListItem>\n      </div>\n    </template>\n\n    <template v-if=\"showAppendSlot\" #append-item>\n      <div class=\"a-list-item__sticky a-list-item__skipped\">\n        <slot name=\"append-item\" />\n      </div>\n    </template>\n\n    <template v-if=\"multiple || chips\" #selection=\"{ item, index }\">\n      <v-chip\n        v-if=\"index < 2\"\n        size=\"small\"\n        class=\"mr-1\"\n        closable\n        @click:close=\"removeItem(item)\"\n        @click.stop\n      >\n        <span>{{ item.title }}</span>\n      </v-chip>\n      <span\n        v-if=\"index === 2\"\n        class=\"text-primary text-caption align-self-center\"\n      >\n        +{{ selection.length - 2 }}\n      </span>\n    </template>\n\n    <template v-for=\"(_, slot) of slots\" #[slot]=\"scope\">\n      <slot v-bind=\"scope\" :key=\"slot\" :name=\"slot\" />\n    </template>\n  </v-combobox>\n</template>\n\n<style lang=\"scss\">\n.v-combobox__mask {\n  color: rgb(var(--v-theme-field_color));\n}\n.a-combobox {\n  .v-field__input {\n    --v-high-emphasis-opacity: 1;\n    --v-medium-emphasis-opacity: 1;\n  }\n  &.v-combobox--active-menu {\n    .v-combobox__selection {\n      display: none;\n    }\n  }\n  .v-combobox__selection {\n    margin: 0;\n  }\n\n  &__selected-chips {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 4px;\n  }\n\n  .v-chip {\n    background-color: rgb(var(--v-theme-chip_bg));\n    color: rgb(var(--v-theme-chip_color));\n  }\n}\n\n.v-menu .v-overlay__content.v-combobox__content > .v-list {\n  padding-bottom: 0;\n  padding-top: 0;\n  position: relative;\n\n  & > .v-list-item {\n    &:not(.v-list-item--prepend):not(.v-list-item--append):hover,\n    &--active {\n      background: rgb(var(--v-theme-hover_positive_secondary_3));\n    }\n  }\n\n  .v-chip {\n    background-color: rgb(var(--v-theme-chip_bg));\n    color: rgb(var(--v-theme-chip_color));\n\n    &:not(:last-child) {\n      margin-right: 4px;\n    }\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed } from \"vue\";\nimport type { IAction, IActionsProps } from \"./ACreateBtn.types\";\nimport type { IMenuItem as IDropdownMenuItem } from \"../ADropdown\";\nimport { ABtn, AMenu, AList, AListItem, ADropdown } from \"../index\";\n\nconst props = withDefaults(\n  defineProps<{\n    createActions?: IAction[] | boolean;\n    actionsProps?: IActionsProps;\n    menuColor?: string;\n    overlayColor?: string;\n    overlayOpacity?: string | number;\n    iconSize?: string;\n    icon?: boolean;\n    caption?: string;\n  }>(),\n  {\n    createActions: undefined,\n    actionsProps: undefined,\n    menuColor: \"transparent\",\n    overlayColor: undefined,\n    overlayOpacity: undefined,\n    iconSize: \"x-large\",\n    icon: true,\n    caption: \"\",\n  },\n);\n\ndefineEmits<{\n  (event: \"create\", eventName?: string): void;\n}>();\n\nconst singleAction = computed(() => {\n  if (Array.isArray(props.createActions) && props.createActions.length === 1) {\n    return props.createActions[0];\n  }\n\n  if (props.createActions === true) {\n    return {\n      event: \"add-row\",\n    };\n  }\n\n  return null;\n});\n</script>\n\n<template>\n  <template v-if=\"createActions\">\n    <template v-if=\"icon\">\n      <ABtn\n        v-if=\"singleAction\"\n        color=\"primary\"\n        :icon=\"singleAction.icon || 'add'\"\n        :size=\"iconSize\"\n        class=\"a-create-btn\"\n        :title=\"singleAction.title\"\n        v-bind=\"$attrs\"\n        @click=\"$emit('create', singleAction.event)\"\n      />\n      <AMenu\n        v-if=\"Array.isArray(createActions) && createActions?.length > 1\"\n        color=\"error\"\n        class=\"a-create-btn-menu\"\n        theme=\"light\"\n        :style=\"{\n          '--overlay-color': `var(--v-theme-${overlayColor || 'bg'})`,\n          '--overlay-opacity': overlayOpacity || '0',\n        }\"\n      >\n        <template #activator=\"{ props: btnProps }\">\n          <ABtn\n            color=\"primary\"\n            icon=\"add\"\n            :size=\"iconSize\"\n            class=\"a-create-btn\"\n            v-bind=\"{ ...btnProps, ...$attrs }\"\n          />\n        </template>\n        <AList :class=\"menuColor && `bg-${menuColor}`\">\n          <AListItem\n            v-for=\"(item, index) of createActions as IAction[]\"\n            :key=\"index\"\n            :value=\"index\"\n          >\n            <ABtn\n              :prepend-icon=\"item.icon\"\n              :append-icon=\"item.appendIcon\"\n              :href=\"item.href\"\n              :disabled=\"item.disabled\"\n              :loading=\"item.loading\"\n              variant=\"flat\"\n              block\n              :text=\"$t(item.title)\"\n              v-bind=\"actionsProps\"\n              @click=\"$emit('create', item.event)\"\n            />\n          </AListItem>\n        </AList>\n      </AMenu>\n    </template>\n    <template v-else>\n      <ABtn\n        v-if=\"singleAction\"\n        :prepend-icon=\"singleAction.icon\"\n        :size=\"iconSize\"\n        class=\"a-create-btn\"\n        :text=\"caption || singleAction.title\"\n        v-bind=\"$attrs\"\n        @click=\"$emit('create', singleAction.event)\"\n      />\n      <ADropdown\n        v-else\n        :caption=\"String(caption)\"\n        :data=\"createActions as IDropdownMenuItem[]\"\n      />\n    </template>\n  </template>\n</template>\n\n<style lang=\"scss\">\n.a-create-btn {\n  i {\n    transition-duration: 0.3s;\n    transition-property: transform;\n  }\n\n  &[aria-expanded=\"true\"] i {\n    transform: rotate(45deg);\n  }\n}\n\n.v-menu.a-create-btn-menu {\n  &::before {\n    content: \" \";\n    display: block;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    background: rgb(var(--overlay-color));\n    opacity: var(--overlay-opacity);\n  }\n\n  .v-list-item__overlay {\n    --v-hover-opacity: 0;\n  }\n\n  .v-overlay__content {\n    .a-list.v-list {\n      --list-background: transparent;\n      box-shadow: unset !important;\n      width: max-content;\n\n      .v-list-item {\n        .v-list-item__content {\n          overflow: visible;\n        }\n\n        &:hover {\n          background: transparent;\n        }\n      }\n    }\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed, nextTick, ref, watchEffect, type Ref } from \"vue\";\nimport { useI18n } from \"vue-i18n\";\nimport ADialog from \"./ADialog.vue\";\nimport { ACard, ACardTitle, ACardActions } from \"../ACard\";\nimport { ABtn } from \"../ABtn\";\n\nconst props = withDefaults(\n  defineProps<{\n    title?: string;\n    cancelCaption?: string;\n    modelValue?: boolean;\n    persistent?: boolean;\n    theme?: string;\n    paddingX?: string;\n    paddingY?: string;\n    scrollable?: boolean;\n  }>(),\n  {\n    title: undefined,\n    cancelCaption: undefined,\n    modelValue: undefined,\n    persistent: false,\n    theme: \"light\",\n    paddingX: \"24px\",\n    paddingY: \"16px\",\n    scrollable: true,\n  },\n);\n\nconst emit = defineEmits<{\n  (event: \"update:modelValue\", isVisible: boolean): void;\n}>();\n\nconst { t } = useI18n();\n\nconst actionsSlot = ref<ACardActions>();\nconst contentSlot = ref<HTMLDivElement>();\n\nconst localShow = ref(false);\nconst isVisible = computed({\n  get() {\n    return props.modelValue ?? localShow.value;\n  },\n  set(value) {\n    localShow.value = value;\n    emit(\"update:modelValue\", value);\n  },\n});\n\nconst paddings = computed(() =>\n  props.paddingY ? `margin: ${props.paddingY} ${props.paddingX};` : \"\",\n);\n\nconst cancelText = computed(() =>\n  props.cancelCaption === undefined ? t(\"common.cancel\") : props.cancelCaption,\n);\n\nconst closeDialog = (shouldClose: boolean) => {\n  if (shouldClose || !props.persistent) {\n    isVisible.value = false;\n  }\n};\n\nconst showDialog = () => {\n  isVisible.value = true;\n};\n\nwatchEffect(async () => {\n  if (!isVisible.value) {\n    return;\n  }\n  await nextTick();\n  actionsSlot.value?.$el.querySelector(\".a-btn__cta\")?.focus();\n});\n\ndefineExpose<{\n  actionsSlot: Ref<ACardActions | undefined>;\n  contentSlot: Ref<HTMLDivElement | undefined>;\n}>({ actionsSlot, contentSlot });\n</script>\n\n<template>\n  <ADialog\n    v-model=\"isVisible\"\n    :persistent=\"persistent\"\n    :theme=\"theme\"\n    transition=\"dialog-bottom-transition\"\n  >\n    <template #activator>\n      <slot name=\"activator\" :props=\"{ onClick: showDialog }\" />\n    </template>\n\n    <ACard class=\"d-flex h-100 overflow-hidden\">\n      <ACardTitle v-if=\"title\" class=\"d-flex align-center pl-6 ma-0\">\n        {{ title }}\n      </ACardTitle>\n      <div\n        ref=\"contentSlot\"\n        :style=\"paddings\"\n        class=\"flex-grow-1 d-flex flex-column\"\n        :class=\"scrollable ? 'overflow-auto' : 'overflow-hidden'\"\n      >\n        <slot />\n      </div>\n      <ACardActions\n        v-if=\"cancelText || $slots.actions\"\n        ref=\"actionsSlot\"\n        class=\"justify-end\"\n      >\n        <ABtn\n          v-if=\"cancelText\"\n          color=\"on_dark\"\n          :text=\"cancelText\"\n          @click=\"closeDialog(true)\"\n        />\n        <slot\n          name=\"actions\"\n          :is-visible=\"isVisible\"\n          @click=\"closeDialog(false)\"\n        />\n      </ACardActions>\n    </ACard>\n  </ADialog>\n</template>\n\n<style scoped lang=\"scss\">\n.dialog-bottom-transition-enter-active,\n.dialog-bottom-transition-leave-active {\n  transition: transform 0.2s ease-in-out;\n}\n\n.v-card {\n  background-color: rgb(var(--v-theme-background_2));\n\n  .v-card-title {\n    height: 64px;\n  }\n\n  .v-card-actions {\n    background: $gradient_2;\n\n    .v-btn ~ .v-btn {\n      margin-inline-start: 16px;\n    }\n  }\n}\n</style>\n","<script setup lang=\"ts\">\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { computed, ref, useAttrs, useSlots, watch } from \"vue\";\nimport type { IDataFetcher } from \"@/services/api/api.models\";\nimport {\n  ABtn,\n  AList,\n  AMenu,\n  AListItem,\n  ATextField,\n  ASearchField,\n  APaginationBar,\n  ASkeletonLoader,\n  LOCATION,\n  DEFAULT_PAGE_SIZE,\n  type IMenuItem,\n} from \"..\";\n\nconst props = withDefaults(\n  defineProps<{\n    modelValue?: boolean;\n    text?: string;\n    prependText?: boolean;\n    fab?: boolean | string;\n    search?: boolean;\n    searchLazy?: boolean;\n    searchLabel?: string;\n    pageSize?: boolean | number | string;\n    variant?: string;\n    data: IMenuItem[] | IDataFetcher<IMenuItem>;\n    location?: LOCATION;\n    eager?: boolean;\n    menuWidth?: string | number;\n    loading?: boolean;\n    itemTitle?: string;\n    block?: boolean;\n    select?: boolean;\n  }>(),\n  {\n    modelValue: false,\n    text: \"\",\n    fab: false,\n    search: false,\n    searchLazy: false,\n    searchLabel: undefined,\n    pageSize: false,\n    variant: undefined,\n    location: undefined,\n    eager: false,\n    menuWidth: \"350px\",\n    loading: false,\n    itemTitle: \"title\",\n    select: false,\n  },\n);\n\nconst emit = defineEmits<{\n  (event: \"event\", eventName?: string, item: IMenuItem): void;\n  (event: \"update:modelValue\", value: boolean): void;\n}>();\n\nconst attrs = useAttrs();\nconst slots = useSlots();\n\nconst isFetched = ref(false);\nconst isMenuOpened = ref(props.modelValue);\nconst isLocal = computed(() => typeof props.data !== \"function\");\n\nconst _data = ref(Array.isArray(props.data) ? [...props.data] : []);\nconst searchText = ref(\"\");\nconst isLoading = ref(false);\n\nconst localPageSize = computed(() => {\n  if (!props.pageSize) {\n    return 0;\n  }\n\n  return props.pageSize === true ? DEFAULT_PAGE_SIZE : Number(props.pageSize);\n});\nconst showPagination = computed(() => localPageSize.value > 0);\nconst pageIndex = ref(0);\nconst _rowsCount = ref(1);\n\nwatch(\n  () => props.modelValue,\n  (value) => {\n    isMenuOpened.value = value;\n  },\n);\nwatch(isMenuOpened, () => {\n  if (isMenuOpened.value !== props.modelValue) {\n    emit(\"update:modelValue\", isMenuOpened.value);\n  }\n});\nwatch(\n  () => props.data as IMenuItem[],\n  (items) => {\n    _data.value = Array.isArray(items) ? [...items] : [];\n  },\n);\n\nconst filteredItems = computed(() => {\n  if (!searchText.value || !isLocal.value) {\n    return _data.value;\n  }\n\n  const searchValue = searchText.value.toLowerCase();\n  return _data.value.filter((item) =>\n    String(item[props.itemTitle as keyof IMenuItem])\n      .toLowerCase()\n      .includes(searchValue),\n  );\n});\nconst pageItems = computed(() => {\n  if (!showPagination.value || !isLocal.value) {\n    return filteredItems.value;\n  }\n\n  const pageStart = pageIndex.value * localPageSize.value;\n  return filteredItems.value.slice(pageStart, pageStart + localPageSize.value);\n});\nconst pageCount = computed(() => {\n  if (!showPagination.value) {\n    return 1;\n  }\n\n  const rowCount = isLocal.value\n    ? filteredItems.value.length\n    : _rowsCount.value;\n  return Math.max(Math.ceil(rowCount / localPageSize.value), 1);\n});\n\nconst skeletonCount = computed(\n  () => pageItems.value.length || DEFAULT_PAGE_SIZE,\n);\n\nconst iconPosition = computed(() => {\n  if (props.select) {\n    return props.prependText ? \"appendInnerIcon\" : \"prependInnerIcon\";\n  }\n  return props.prependText ? \"appendIcon\" : \"prependIcon\";\n});\n\nconst updatedProps = computed(() => {\n  let icon;\n  if (props.fab) {\n    icon = props.fab === true ? \"add\" : props.fab;\n  }\n  const location = props.location || (props.fab ? \"end\" : \"bottom\");\n\n  const arrowIcon = isMenuOpened.value ? \"arrow_drop_up\" : \"arrow_drop_down\";\n  const captionFieldName = props.select ? \"modelValue\" : \"text\";\n  const variant = props.variant || (props.select ? \"outlined\" : \"text\");\n\n  return {\n    [iconPosition.value]: arrowIcon,\n    [captionFieldName]: props.text,\n    variant,\n    icon,\n    location,\n    ...attrs,\n  };\n});\n\nconst showSearchInput = computed(() => props.search || props.searchLazy);\nconst showPrependSlot = computed(\n  () => Boolean(slots[\"prepend-item\"]) || showSearchInput.value,\n);\nconst showAppendSlot = computed(\n  () => Boolean(slots[\"append-item\"]) || showPagination.value,\n);\n\nconst listClass = computed(() => {\n  switch (props.location) {\n    case LOCATION.START:\n    case LOCATION.END:\n      return \"mx-1\";\n    default:\n      return \"my-1\";\n  }\n});\n\nconst handleClick = (item: IMenuItem) => {\n  if (item.callback) {\n    item.callback();\n  } else {\n    emit(\"event\", item.event, item);\n  }\n};\n\nwatch(pageCount, (count) => {\n  if (count <= pageIndex.value) {\n    pageIndex.value = count - 1;\n  }\n});\n\nconst fetchData = async (query: {\n  query: string;\n  start: number;\n  limit: number;\n}) => {\n  if (isLocal.value) {\n    return;\n  }\n\n  try {\n    isFetched.value = true;\n    isLoading.value = true;\n\n    const api = props.data as IDataFetcher<IMenuItem>;\n    const { data, n_rows } = await api(query);\n    _data.value = data;\n    _rowsCount.value = n_rows;\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error((err as Error).message);\n  } finally {\n    isLoading.value = false;\n  }\n};\n\nconst getQuery = () => {\n  const limit = localPageSize.value ?? DEFAULT_PAGE_SIZE;\n  const start = limit * pageIndex.value;\n\n  return {\n    query: searchText.value,\n    start,\n    limit,\n  };\n};\n\nwatch(getQuery, fetchData);\n\nwatch(isMenuOpened, (isShown) => {\n  if (!isShown) {\n    return;\n  }\n\n  if (isLocal.value) {\n    pageIndex.value = 0;\n    _data.value = [...(props.data as IMenuItem[])];\n    return;\n  }\n\n  if (!props.eager && isFetched.value) {\n    return;\n  }\n\n  _data.value = [];\n  _rowsCount.value = 0;\n  const isChanged = pageIndex.value || searchText.value;\n  if (isChanged) {\n    pageIndex.value = 0;\n    searchText.value = \"\";\n  } else {\n    fetchData(getQuery());\n  }\n});\n</script>\n\n<template>\n  <div :style=\"{ display: block ? 'block' : 'inline-block' }\">\n    <AMenu\n      v-model=\"isMenuOpened\"\n      class=\"a-dropdown__menu\"\n      :location=\"location\"\n      :width=\"menuWidth\"\n    >\n      <template #activator=\"{ props: btnProps }\">\n        <slot name=\"activator\">\n          <ATextField\n            v-if=\"select\"\n            class=\"a-dropdown__activator\"\n            readonly\n            persist-variant\n            v-bind=\"{ ...btnProps, ...updatedProps }\"\n          />\n          <ABtn\n            v-else\n            class=\"a-dropdown__activator\"\n            v-bind=\"{ ...btnProps, ...updatedProps }\"\n          />\n        </slot>\n      </template>\n      <AList rounded=\"lg\" :class=\"listClass\">\n        <template v-if=\"showPrependSlot\">\n          <div class=\"a-list-item__sticky a-list-item__skipped\">\n            <v-list-item v-if=\"showSearchInput\">\n              <ASearchField\n                v-model=\"searchText\"\n                :model-modifiers=\"{ lazy: searchLazy }\"\n                :label=\"searchLabel\"\n                theme=\"light\"\n                autofocus\n                @click.stop\n              />\n            </v-list-item>\n\n            <slot name=\"prepend-item\" />\n          </div>\n        </template>\n\n        <template v-if=\"isLoading || loading\">\n          <div\n            v-for=\"index in skeletonCount\"\n            :key=\"index\"\n            class=\"a-list-item__skipped\"\n          >\n            <slot name=\"loader\">\n              <AListItem class=\"py-0\">\n                <ASkeletonLoader width=\"100%\" height=\"20px\" />\n              </AListItem>\n            </slot>\n          </div>\n        </template>\n        <template\n          v-for=\"item of pageItems\"\n          v-else\n          :key=\"item[props.itemTitle as keyof IMenuItem]\"\n        >\n          <slot\n            name=\"item\"\n            :item-title=\"itemTitle\"\n            :item=\"item\"\n            @click=\"handleClick(item)\"\n          >\n            <AListItem\n              class=\"py-0\"\n              :title=\"item[itemTitle]\"\n              v-bind=\"item\"\n              @click=\"handleClick(item)\"\n            />\n          </slot>\n        </template>\n\n        <template v-if=\"showAppendSlot\">\n          <div class=\"a-list-item__sticky a-list-item__skipped\">\n            <slot name=\"append-item\" />\n\n            <v-list-item v-if=\"showPagination\">\n              <APaginationBar\n                v-model:page-count=\"pageCount\"\n                v-model:page-index=\"pageIndex\"\n                @click.stop\n              />\n            </v-list-item>\n          </div>\n        </template>\n      </AList>\n    </AMenu>\n  </div>\n</template>\n\n<style lang=\"scss\">\n.a-dropdown {\n  &__menu {\n    .a-text-field.v-input {\n      color: rgb(var(--v-theme-on_light));\n    }\n    .a-checkbox {\n      --v-theme-checkbox_icon: var(--v-theme-surface);\n\n      .v-selection-control {\n        --v-selection-control-size: 30px;\n\n        .v-icon {\n          margin-right: 8px;\n        }\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <v-icon>\n    <template v-for=\"(_, slot) of $slots\" #[slot]=\"scope\">\n      <slot :key=\"slot\" :name=\"slot\" v-bind=\"scope\" />\n    </template>\n  </v-icon>\n</template>\n","<script setup lang=\"ts\">\nimport { computed } from \"vue\";\nimport AIcon from \"../AIcon/AIcon.vue\";\n\nconst props = withDefaults(\n  defineProps<{\n    clickable?: boolean;\n    color?: string;\n    borderColor?: string;\n    error?: boolean;\n    errorIcon?: string;\n    icon?: string;\n    variant?: \"mini\" | \"icon\" | \"default\";\n    width?: number | string;\n    label?: string;\n  }>(),\n  {\n    color: undefined,\n    borderColor: undefined,\n    errorIcon: \"error\",\n    icon: undefined,\n    variant: \"default\",\n    width: undefined,\n    label: \"\",\n  },\n);\n\nconst updatedProps = computed(() => ({\n  class: [\n    `a-flag a-flag--${props.variant} bg-${props.color}`,\n    {\n      \"a-flag--clickable\": props.clickable,\n      \"a-flag--has-icon\": props.variant === \"default\" && props.icon,\n      \"a-flag--has-error\": props.error,\n    },\n  ],\n  style: {\n    \"--border-color\": props.borderColor,\n    width:\n      props.width && props.variant === \"default\"\n        ? `${props.width}px`\n        : undefined,\n  },\n}));\n</script>\n\n<template>\n  <div v-bind=\"updatedProps\">\n    <a-icon\n      v-if=\"variant !== 'mini' && icon\"\n      :icon=\"icon\"\n      class=\"a-flag__icon\"\n    />\n    <div class=\"a-flag__content\">\n      <slot>\n        {{ label }}\n      </slot>\n    </div>\n    <div v-if=\"error\" class=\"a-flag__error bg-error\">\n      <a-icon\n        v-if=\"variant === 'mini' || variant === 'default'\"\n        :icon=\"errorIcon\"\n        class=\"a-flag__error--icon\"\n      />\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\">\n.a-flag {\n  font-family: RobotoCondensed, sans-serif;\n  box-sizing: border-box;\n  position: relative;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  border: 1px solid var(--border-color, transparent);\n\n  &__icon {\n    display: block;\n    margin: auto 10px;\n  }\n\n  &__error {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 0 6px;\n    height: 100%;\n\n    &--icon {\n      display: block;\n    }\n  }\n\n  &__content {\n    margin: auto 4px;\n    flex-grow: 1;\n  }\n\n  &--default {\n    height: 32px;\n    font-size: 0.875rem;\n    line-height: 1rem;\n    border-radius: 8px;\n  }\n\n  &--mini {\n    line-height: 1;\n    font-size: 0.75rem;\n    border-radius: 4px;\n    height: 20px;\n    min-width: 20px;\n\n    .a-flag__content {\n      margin: auto 6px;\n    }\n\n    .a-flag__error {\n      padding: 0 6px;\n\n      .v-icon {\n        font-size: 0.875rem;\n      }\n    }\n\n    &.bg-on-background {\n      border: 1px solid rgb(var(--v-theme-background));\n    }\n\n    &.bg-on_dark {\n      border: 1px solid rgb(var(--v-theme-on_light));\n    }\n\n    &.bg-on_light {\n      border: 1px solid rgb(var(--v-theme-on_dark));\n    }\n  }\n\n  &--icon {\n    width: 40px;\n    height: 32px;\n    border-radius: 8px;\n\n    .a-flag__content {\n      position: relative;\n      height: 100%;\n      opacity: 0;\n    }\n\n    .a-flag__error {\n      width: 50%;\n      height: 100%;\n    }\n  }\n\n  &--clickable {\n    cursor: pointer;\n  }\n\n  &.bg-background {\n    border: 1px solid rgb(var(--v-theme-on-background));\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed } from \"vue\";\nimport { ABtn, ACol, ASkeletonLoader, MESSAGES } from \"../index\";\n\nconst props = withDefaults(\n  defineProps<{\n    pageIndex: number;\n    pageCount: number;\n    isLoading?: boolean;\n  }>(),\n  {\n    isLoading: false,\n  },\n);\n\nconst emit = defineEmits<{\n  (event: \"update:page-index\", value: number): void;\n}>();\n\nconst selectedPageIndex = computed({\n  get() {\n    return (props.pageIndex ?? 0) + 1;\n  },\n  set(value: number) {\n    emit(\"update:page-index\", value - 1);\n  },\n});\n\nconst isFirstPage = computed(() => selectedPageIndex.value === 1);\nconst isLastPage = computed(() => selectedPageIndex.value === props.pageCount);\n</script>\n\n<template>\n  <ACol\n    class=\"a-pagination-bar d-flex align-center justify-center pa-0\"\n    cols=\"0\"\n  >\n    <ABtn\n      :disabled=\"isFirstPage\"\n      variant=\"text\"\n      icon=\"first_page\"\n      class=\"mr-2\"\n      :show-skeleton=\"isLoading\"\n      @click=\"selectedPageIndex = 1\"\n    />\n    <ABtn\n      :disabled=\"isFirstPage\"\n      variant=\"text\"\n      icon=\"navigate_before\"\n      class=\"mr-2\"\n      :show-skeleton=\"isLoading\"\n      @click=\"selectedPageIndex -= 1\"\n    />\n    <ASkeletonLoader :loading=\"isLoading\" width=\"90px\" height=\"24px\">\n      <span>\n        {{\n          `${selectedPageIndex || 1} ${MESSAGES.OF} ${pageCount || 1} ${\n            MESSAGES.PAGES\n          }`\n        }}\n      </span>\n    </ASkeletonLoader>\n    <ABtn\n      :disabled=\"isLastPage\"\n      variant=\"text\"\n      icon=\"navigate_next\"\n      class=\"mx-2\"\n      :show-skeleton=\"isLoading\"\n      @click=\"selectedPageIndex += 1\"\n    />\n    <ABtn\n      :disabled=\"isLastPage\"\n      variant=\"text\"\n      icon=\"last_page\"\n      class=\"mr-2\"\n      :show-skeleton=\"isLoading\"\n      @click=\"selectedPageIndex = pageCount\"\n    />\n  </ACol>\n</template>\n","<script setup lang=\"ts\">\nimport { computed, ref, useAttrs, type Ref } from \"vue\";\nimport { MESSAGES } from \"../constants\";\nimport ASkeletonLoader from \"../ASkeletonLoader/ASkeletonLoader.vue\";\nimport type { VTextField } from \"vuetify/components\";\n\ndefineOptions({ inheritAttrs: false });\n\nconst props = withDefaults(\n  defineProps<{\n    modelValue?: string | number;\n    modelModifiers?: Record<string, boolean>;\n    color?: string;\n    density?: string;\n    hideDetails?: boolean | \"auto\";\n    readonly?: boolean;\n    transparent?: boolean;\n    preserveHeight?: boolean;\n    variant?: string;\n    placeholder?: string;\n    persistentPlaceholder?: boolean;\n    required?: boolean;\n    hideMandatory?: boolean;\n    changed?: boolean;\n    loading?: boolean;\n    autofocus?: boolean;\n    persistVariant?: boolean;\n  }>(),\n  {\n    modelValue: \"\",\n    modelModifiers: () => ({}),\n    color: \"accent\",\n    density: \"compact\",\n    hideDetails: \"auto\",\n    preserveHeight: false,\n    variant: \"outlined\",\n    placeholder: \"\",\n    persistentPlaceholder: false,\n    required: false,\n    hideMandatory: false,\n    changed: false,\n    loading: false,\n    autofocus: false,\n    persistVariant: false,\n  },\n);\n\nconst emit = defineEmits<{\n  (event: \"update:modelValue\", value: string): void;\n}>();\n\nconst textFieldRef: Ref<VTextField | undefined> = ref();\n\nconst attrs = useAttrs();\n\nconst updatedProps = computed(() => ({\n  ...attrs,\n  ...props,\n  class: [\n    \"a-input\",\n    \"a-text-field\",\n    {\n      \"v-input--filled\": !props.transparent,\n      \"a-input--preserve-height\": props.preserveHeight,\n      \"a-input--changed\": props.changed,\n      \"a-input--required\":\n        !props.hideMandatory && props.required && !props.readonly,\n    },\n    attrs.class,\n  ],\n  variant: props.persistVariant || !props.readonly ? props.variant : \"plain\",\n  placeholder: props.readonly ? MESSAGES.MANDATORY_FIELD : props.placeholder,\n  persistentPlaceholder: props.readonly || props.persistentPlaceholder,\n}));\n\nconst innerInput = ref(\"\");\n\nconst handleChange = ({ target }: Event) => {\n  if (props.modelModifiers?.lazy) {\n    const { value } = target as HTMLInputElement;\n    emit(\"update:modelValue\", value);\n  }\n};\nconst handleInput = (text: string) => {\n  innerInput.value = text;\n  if (!props.modelModifiers?.lazy) {\n    emit(\"update:modelValue\", text);\n  }\n};\nconst handleEnter = () => {\n  if (!props.modelModifiers?.lazy) {\n    emit(\"update:modelValue\", innerInput.value);\n  }\n};\nconst handleClear = () => {\n  if (props.modelModifiers?.lazy) {\n    innerInput.value = \"\";\n    emit(\"update:modelValue\", \"\");\n  }\n};\n\nfunction focus() {\n  (textFieldRef.value?.$el as HTMLDivElement)\n    .querySelector<HTMLInputElement>(\"input\")\n    ?.focus();\n}\n\ndefineExpose({\n  focus,\n});\n</script>\n\n<template>\n  <div v-if=\"loading\">\n    <ASkeletonLoader\n      :class=\"'a-input--skeleton-' + density\"\n      class=\"a-input v-input\"\n    />\n  </div>\n  <v-text-field\n    v-show=\"!loading\"\n    ref=\"textFieldRef\"\n    v-bind=\"updatedProps\"\n    @keypress.enter=\"handleEnter\"\n    @change=\"handleChange\"\n    @click:clear=\"handleClear\"\n    @update:modelValue=\"handleInput\"\n  >\n    <template v-for=\"(_, slot) of $slots\" #[slot]=\"scope\">\n      <slot :key=\"slot\" :name=\"slot\" v-bind=\"scope\" />\n    </template>\n  </v-text-field>\n</template>\n\n<style lang=\"scss\">\n.v-text-field.v-input {\n  position: relative;\n  color: rgb(var(--v-theme-field_color));\n\n  &.a-input--changed {\n    color: rgb(var(--v-theme-field_color_changed));\n    .v-field__outline {\n      --v-theme-field_outline: var(--v-theme-field_color_changed);\n    }\n  }\n\n  &--disabled {\n    opacity: 1;\n    color: rgb(var(--v-theme-disabled));\n  }\n\n  .v-label {\n    color: rgb(var(--v-theme-field_label));\n    --v-medium-emphasis-opacity: 1;\n  }\n\n  &--filled .v-field--variant-outlined {\n    background-color: rgb(var(--v-theme-field_bg));\n  }\n\n  &.a-input--required {\n    .v-field-label:after {\n      content: \"*\";\n      margin-left: 4px;\n      color: rgb(var(--v-theme-active_secondary_5));\n    }\n  }\n\n  &--readonly {\n    input::placeholder {\n      font-style: italic;\n      opacity: 1;\n      color: rgb(var(--v-theme-field_label));\n    }\n    .v-label.v-field-label {\n      top: 7px;\n    }\n    .v-field--variant-plain.v-field,\n    .v-field--variant-underlined.v-field {\n      --v-field-padding-top: 0px;\n      --v-field-padding-bottom: 8px;\n    }\n  }\n\n  .v-input__details {\n    top: -4px;\n    margin-bottom: 0;\n    padding-top: 4px;\n  }\n\n  &.a-input--preserve-height {\n    .v-input__details {\n      position: absolute;\n    }\n  }\n\n  .v-field {\n    .v-chip {\n      background-color: rgb(var(--v-theme-background_3));\n\n      &__underlay {\n        opacity: 0;\n      }\n    }\n\n    &:not(&--error, &--disabled) .v-field__outline {\n      --v-field-border-opacity: 1;\n      color: rgb(var(--v-theme-field_outline));\n    }\n\n    .v-icon {\n      --v-medium-emphasis-opacity: 1;\n      color: rgb(var(--v-theme-field_icon));\n    }\n  }\n}\n\n.a-input--skeleton {\n  &-compact {\n    box-sizing: content-box;\n    height: 20px;\n    margin: 10px 0;\n    border-radius: 100px;\n  }\n  &-default {\n    box-sizing: content-box;\n    height: 20px;\n    margin: 18px 0;\n    border-radius: 100px;\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed, ref } from \"vue\";\nimport { ATextField } from \"../ATextField\";\nimport { AProgressIndicatorCircular } from \"../AProgressIndicatorCircular\";\nimport type { PasswordStrength } from \"./APasswordField.types\";\n\nconst props = withDefaults(\n  defineProps<{\n    density?: string;\n    hideDetails?: boolean | \"auto\";\n    modelValue?: string;\n    strength?: ((value: string) => PasswordStrength) | null;\n  }>(),\n  {\n    modelValue: \"\",\n    density: \"default\",\n    hideDetails: \"auto\",\n    strength: null,\n  },\n);\n\nconst isTextVisible = ref(false);\n\nconst passwordStrength = computed<Partial<PasswordStrength>>(() =>\n  props.strength ? props.strength(props.modelValue) : {},\n);\n</script>\n\n<template>\n  <ATextField\n    :class=\"{ 'a-text-field--has-circular-progress': strength }\"\n    :type=\"isTextVisible ? 'text' : 'password'\"\n    :density=\"density\"\n    prepend-inner-icon=\"lock\"\n    :append-inner-icon=\"isTextVisible ? 'visibility_off' : 'visibility'\"\n    required\n    :model-value=\"modelValue\"\n    v-bind=\"$attrs\"\n    @click:append-inner=\"isTextVisible = !isTextVisible\"\n  >\n    <AProgressIndicatorCircular\n      v-if=\"strength\"\n      :color=\"passwordStrength.color\"\n      :size=\"density === 'default' ? 40 : 28\"\n      :model-value=\"passwordStrength.value\"\n    />\n  </ATextField>\n</template>\n\n<style lang=\"scss\">\n.a-text-field--has-circular-progress {\n  position: relative;\n\n  .v-field__prepend-inner {\n    padding-left: 6px;\n    padding-right: 6px;\n  }\n\n  .a-progress-indicator-circular {\n    position: absolute;\n    left: -38px;\n    top: 9px;\n  }\n\n  &.v-input--density-compact {\n    .v-field__prepend-inner {\n      //padding-top: 13px;\n      padding-left: 4px;\n      padding-right: 4px;\n\n      .v-icon {\n        font-size: 1rem;\n      }\n    }\n\n    .a-progress-indicator-circular {\n      position: absolute;\n      left: -26px;\n      top: 7px;\n    }\n  }\n}\n.v-field__append-inner {\n  .v-icon {\n    opacity: unset;\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed, useModel } from \"vue\";\nimport ASkeletonLoader from \"../ASkeletonLoader/ASkeletonLoader.vue\";\nimport { useInputColor } from \"../use/color\";\n\nconst props = withDefaults(\n  defineProps<{\n    density?: string;\n    hideDetails?: boolean | \"auto\";\n    loading?: boolean;\n    disabled?: boolean;\n    readonly?: boolean;\n    modelValue?: boolean;\n    label?: string;\n  }>(),\n  {\n    density: \"compact\",\n    hideDetails: \"auto\",\n    disabled: false,\n    modelValue: false,\n    loading: false,\n    label: undefined,\n  },\n);\n\ndefineEmits<{\n  (event: \"update:modelValue\", value: boolean): void;\n}>();\n\nconst value = useModel(props, \"modelValue\");\n\nconst color = useInputColor(props);\n\nconst updatedProps = computed(() => ({\n  ...props,\n  trueIcon: props.readonly ? \"done\" : undefined,\n  falseIcon: props.readonly ? \"clear\" : undefined,\n}));\n</script>\n\n<template>\n  <div v-if=\"loading\" class=\"a-input--skeleton-compact d-flex align-center\">\n    <ASkeletonLoader\n      type=\"icon\"\n      width=\"24px\"\n      height=\"24px\"\n      class=\"a-input v-input mr-2\"\n    />\n    <ASkeletonLoader v-if=\"label\" height=\"18px\" class=\"a-input v-input\" />\n  </div>\n  <v-radio\n    v-else\n    v-model=\"value\"\n    v-bind=\"updatedProps\"\n    :color=\"color\"\n    class=\"a-radio\"\n  >\n    <template v-for=\"(_, slot) of $slots\" #[slot]=\"scope\">\n      <slot :key=\"slot\" :name=\"slot\" v-bind=\"scope\" />\n    </template>\n  </v-radio>\n</template>\n\n<style lang=\"scss\">\n.a-radio {\n  &.v-selection-control {\n    --v-selection-control-size: 40px;\n\n    .v-label,\n    &__input > .v-icon,\n    &--disabled {\n      opacity: 1;\n    }\n\n    &--disabled {\n      color: rgb(var(--v-theme-disabled));\n    }\n  }\n}\n</style>\n","<script setup lang=\"ts\">\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { computed, ref, watch } from \"vue\";\nimport {\n  ASkeletonLoader,\n  AChip,\n  ASearchField,\n  APaginationBar,\n  useSelect,\n  DEFAULT_PAGE_SIZE,\n  type IListProps,\n  type IItem,\n} from \"../index\";\n\ninterface ISelectProps extends IListProps {\n  color?: string;\n  density?: \"default\" | \"comfortable\" | \"compact\";\n  readonly?: boolean;\n  transparent?: boolean;\n  variant?:\n    | \"outlined\"\n    | \"plain\"\n    | \"underlined\"\n    | \"filled\"\n    | \"solo\"\n    | \"solo-inverted\"\n    | \"solo-filled\";\n  placeholder?: string;\n  persistentPlaceholder?: boolean;\n  required?: boolean;\n  hideMandatory?: boolean;\n  hideNoData?: boolean;\n  hideDetails?: boolean | string;\n  changed?: boolean;\n  loading?: boolean;\n  multiple?: boolean;\n  chips?: boolean;\n  modelValue?: any;\n  items?: IItem[];\n  itemTitle?: string;\n  itemValue?: string;\n  noDataText?: string;\n  pageSize?: boolean | number | string;\n  search?: boolean;\n  searchLabel?: string;\n  menu?: boolean;\n  focused?: boolean;\n}\n\nconst props = withDefaults(defineProps<ISelectProps>(), {\n  color: \"accent\",\n  density: \"compact\",\n  readonly: false,\n  variant: \"outlined\",\n  placeholder: \"\",\n  persistentPlaceholder: false,\n  required: false,\n  hideMandatory: false,\n  hideNoData: false,\n  hideDetails: \"auto\",\n  changed: false,\n  loading: false,\n  multiple: false,\n  chips: false,\n  modelValue: \"\",\n  items: () => [],\n  itemTitle: \"title\",\n  itemValue: \"value\",\n  pageSize: false,\n  noDataText: undefined,\n  search: false,\n  searchLabel: undefined,\n  focused: false,\n});\n\nconst emit = defineEmits<{\n  (event: \"update:modelValue\", value: any): void;\n  (event: \"update:menu\", value: boolean): void;\n}>();\n\nconst {\n  localMenu,\n  slotsList,\n  slots,\n  showChips,\n  updatedProps,\n\n  getItemTitle,\n  removeItem,\n  updateSelection,\n  selectedItems,\n} = useSelect(props, emit, \"a-select\");\n\nconst searchText = ref(\"\");\nconst pageIndex = ref(0);\nconst filteredItems = computed(() => {\n  if (!searchText.value) {\n    return [...props.items];\n  }\n  const text = searchText.value.toLowerCase();\n  return props.items.filter((item) =>\n    String(getItemTitle(item)).toLowerCase().includes(text),\n  );\n});\nconst localPageSize = computed(() => {\n  if (!props.pageSize) {\n    return 0;\n  }\n\n  return props.pageSize === true ? DEFAULT_PAGE_SIZE : Number(props.pageSize);\n});\nconst showPagination = computed(() => localPageSize.value > 0);\nconst pageItems = computed(() => {\n  if (!showPagination.value) {\n    return filteredItems.value;\n  }\n\n  const pageStart = pageIndex.value * localPageSize.value;\n  return filteredItems.value.slice(pageStart, pageStart + localPageSize.value);\n});\n\nconst pageCount = computed(() =>\n  showPagination.value\n    ? Math.max(Math.ceil(filteredItems.value.length / localPageSize.value), 1)\n    : 1,\n);\n\nwatch(pageCount, (count) => {\n  if (count <= pageIndex.value) {\n    pageIndex.value = count - 1;\n  }\n});\n\nconst extendedProps = computed(() => ({\n  ...updatedProps.value,\n  items: pageItems.value,\n  menuProps:\n    pageCount.value <= 1\n      ? undefined\n      : {\n          maxHeight: (localPageSize.value + 4) * 48,\n        },\n}));\n\nconst showSearchInput = computed(() => props.search && props.items?.length);\nconst showPrependSlot = computed(\n  () =>\n    Boolean(slotsList[\"prepend-item\"]) ||\n    showChips.value ||\n    showSearchInput.value,\n);\nconst showAppendSlot = computed(() =>\n  Boolean(slotsList[\"append-item\"] || pageCount.value > 1),\n);\n</script>\n\n<template>\n  <div v-if=\"loading\">\n    <ASkeletonLoader\n      :class=\"`a-input v-input a-select a-input--skeleton-${density}`\"\n    />\n  </div>\n\n  <v-select\n    v-else\n    v-model:menu=\"localMenu\"\n    v-bind=\"extendedProps\"\n    @update:model-value=\"updateSelection\"\n  >\n    <template v-if=\"showPrependSlot\" #prepend-item>\n      <div class=\"a-list-item__sticky a-list-item__skipped\">\n        <v-list-item v-if=\"showSearchInput\">\n          <ASearchField\n            v-model.trim=\"searchText\"\n            :label=\"searchLabel\"\n            autofocus\n          />\n        </v-list-item>\n\n        <slot name=\"prepend-item\" />\n\n        <v-list-item v-if=\"showChips\">\n          <v-list-item-title class=\"a-select__selected-chips\">\n            <AChip\n              v-for=\"selected of selectedItems\"\n              :key=\"selected\"\n              size=\"small\"\n              closable\n              @click:close=\"removeItem(selected)\"\n            >\n              {{ getItemTitle(selected) }}\n            </AChip>\n          </v-list-item-title>\n        </v-list-item>\n      </div>\n    </template>\n\n    <template v-if=\"showAppendSlot\" #append-item>\n      <div class=\"a-list-item__sticky a-list-item__skipped\">\n        <slot name=\"append-item\" />\n\n        <v-list-item v-if=\"showPagination\">\n          <APaginationBar\n            v-model:page-count=\"pageCount\"\n            v-model:page-index=\"pageIndex\"\n          />\n        </v-list-item>\n      </div>\n    </template>\n\n    <template v-if=\"multiple || chips\" #selection=\"{ item, index }\">\n      <v-chip\n        v-if=\"index < 2\"\n        size=\"small\"\n        class=\"mr-1\"\n        closable\n        @click:close=\"removeItem(item)\"\n        @click.stop\n      >\n        <span>{{ item.title }}</span>\n      </v-chip>\n      <span\n        v-if=\"index === 2\"\n        class=\"text-primary text-caption align-self-center\"\n      >\n        +{{ modelValue.length - 2 }}\n      </span>\n    </template>\n\n    <template v-for=\"(_, slot) of slots\" #[slot]=\"scope\">\n      <slot :key=\"slot\" :name=\"slot\" v-bind=\"scope\" />\n    </template>\n  </v-select>\n</template>\n\n<style lang=\"scss\">\n.a-select {\n  &--hide-selection.v-select--active-menu {\n    .v-select__selection {\n      display: none;\n    }\n  }\n\n  .v-select__selection {\n    margin: 0;\n  }\n\n  &__selected-chips {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 4px;\n  }\n\n  .v-chip {\n    background-color: rgb(var(--v-theme-chip_bg));\n    color: rgb(var(--v-theme-chip_color));\n  }\n}\n\n.v-menu .v-overlay__content.v-select__content > .v-list {\n  --v-theme-table_pagination_bg: var(--v-theme-on-background);\n  padding-bottom: 0;\n  padding-top: 0;\n  background: rgb(var(--v-theme-on-background));\n  position: relative;\n\n  & > .v-list-item {\n    color: rgb(var(--v-theme-list_color));\n\n    &:not(.v-list-item--prepend):not(.v-list-item--append):hover,\n    &--active {\n      background: rgb(var(--v-theme-hover_positive_secondary_3));\n    }\n\n    .v-chip:not(:last-child) {\n      margin-right: 4px;\n    }\n  }\n\n  .v-chip {\n    background-color: rgb(var(--v-theme-chip_bg));\n    color: rgb(var(--v-theme-chip_color));\n\n    &:not(:last-child) {\n      margin-right: 4px;\n    }\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { nextTick, ref, watchEffect, watchPostEffect } from \"vue\";\nimport ASnackbar from \"./ASnackbar.vue\";\nimport { NotificationType } from \"../constants\";\nimport { AIcon } from \"../AIcon\";\nimport { ABtn } from \"../ABtn\";\n\ninterface INotification {\n  title?: string;\n  message: string;\n  timeout?: number;\n  type: NotificationType;\n}\n\ninterface ISnackbar {\n  id: number;\n  title?: string;\n  message: string;\n  color: string;\n  show: boolean;\n  timer?: number;\n}\n\nconst props = withDefaults(\n  defineProps<{\n    timeout?: number;\n    modelValue: INotification[];\n    margin?: number;\n  }>(),\n  {\n    timeout: 5000,\n    margin: 0,\n  },\n);\n\nconst emit = defineEmits<{\n  (event: \"update:modelValue\", value: INotification[]): void;\n}>();\n\nconst uniqId = String(Math.random()).slice(2, 6);\nconst snackbarsId = `v-snackbars-${Date.now()}-${uniqId}`;\nlet lastId = 0;\n\nconst snackbars = ref<ISnackbar[]>([]);\n\nwatchPostEffect(async () => {\n  if (!snackbars.value.length) {\n    return;\n  }\n  const snacksClass = `.v-overlay-container .${snackbarsId} .v-overlay__content`;\n  const snacks = document.querySelectorAll<HTMLElement>(snacksClass);\n\n  if (!snacks?.length) {\n    return;\n  }\n\n  let prevBottom = 0;\n  await nextTick;\n  snacks.forEach((el) => {\n    el.style.bottom = `${prevBottom}px`;\n    prevBottom += el.clientHeight + props.margin;\n  });\n});\n\nconst removeSnackbar = (id: number) => {\n  const index = snackbars.value.findIndex((snackbar) => snackbar.id === id);\n  if (index < 0) {\n    return;\n  }\n\n  const removed = snackbars.value[index];\n  if (removed.timer) {\n    clearTimeout(removed.timer);\n  }\n\n  snackbars.value.splice(index, 1);\n};\n\nwatchEffect(() => {\n  if (!props.modelValue.length) {\n    return;\n  }\n\n  const newMessages = props.modelValue.map<ISnackbar>(\n    ({ title, message, timeout, type }) => {\n      const id = ++lastId;\n      const currentTimeout = timeout ?? props.timeout;\n\n      const timer =\n        currentTimeout > 0\n          ? setTimeout(removeSnackbar, currentTimeout, id)\n          : undefined;\n\n      return {\n        id,\n        title,\n        message,\n        color: String(type),\n        show: true,\n        timer,\n      };\n    },\n  );\n  snackbars.value.push(...newMessages);\n  emit(\"update:modelValue\", []);\n});\n</script>\n<template>\n  <ASnackbar\n    v-for=\"snackbar of snackbars\"\n    :key=\"snackbar.id\"\n    v-model=\"snackbar.show\"\n    :color=\"snackbar.color\"\n    :class=\"`v-snackbars ${snackbarsId} v-snackbars--${snackbar.id}`\"\n    :timeout=\"-1\"\n    @click=\"removeSnackbar(snackbar.id)\"\n  >\n    <div class=\"d-flex align-center\">\n      <AIcon icon=\"info\" class=\"pr-6 pl-1\" />\n      <div>\n        <div v-if=\"snackbar.title\" class=\"v-snackbars--title\">\n          {{ snackbar.title }}\n        </div>\n        <span class=\"v-snackbars--text\">\n          {{ snackbar.message }}\n        </span>\n      </div>\n    </div>\n    <template #actions>\n      <ABtn\n        color=\"white\"\n        variant=\"text\"\n        text=\"OK\"\n        @click=\"snackbar.show = false\"\n      />\n    </template>\n  </ASnackbar>\n</template>\n\n<style lang=\"scss\">\n.v-snackbars {\n  &--title {\n    font-weight: bold;\n  }\n\n  .v-overlay__content {\n    transition: bottom 500ms;\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport ASkeletonLoader from \"../ASkeletonLoader/ASkeletonLoader.vue\";\nimport { computed } from \"vue\";\n\nconst props = withDefaults(\n  defineProps<{\n    loading?: boolean;\n    density?: string;\n    readonly?: boolean;\n    bgColor?: string;\n    hideDetails?: boolean | \"auto\";\n    rows?: number | string;\n  }>(),\n  {\n    loading: false,\n    density: \"compact\",\n    readonly: false,\n    bgColor: \"rgb(var(--v-theme-field_bg))\",\n    hideDetails: \"auto\",\n    rows: 5,\n  },\n);\n\nconst updatedProps = computed(() => ({\n  ...props,\n  bgColor: props.readonly ? \"transparent\" : props.bgColor,\n}));\n</script>\n\n<template>\n  <ASkeletonLoader\n    v-if=\"loading\"\n    class=\"a-input v-input\"\n    :height=\"`${rows}lh`\"\n  />\n  <v-textarea v-else class=\"a-textarea\" v-bind=\"updatedProps\">\n    <template v-for=\"(_, slot) of $slots\" #[slot]=\"scope\">\n      <slot :key=\"slot\" :name=\"slot\" v-bind=\"scope\" />\n    </template>\n  </v-textarea>\n</template>\n\n<style lang=\"scss\">\n.a-textarea {\n  .v-field--variant-plain,\n  .v-field--variant-filled .v-field__outline::before,\n  .v-field--variant-underlined .v-field__outline::before {\n    border-style: dashed;\n    border-width: 0 0 0 var(--v-field-border-width);\n  }\n}\n</style>\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { computed, ref, useSlots, watch, watchEffect } from \"vue\";\nimport { MESSAGES } from \"..\";\n\nexport type IItem = Record<string, any> | string;\n\nexport interface IListProps {\n  color?: string;\n  density?: \"default\" | \"comfortable\" | \"compact\";\n  readonly?: boolean;\n  transparent?: boolean;\n  variant?:\n    | \"outlined\"\n    | \"plain\"\n    | \"underlined\"\n    | \"filled\"\n    | \"solo\"\n    | \"solo-inverted\"\n    | \"solo-filled\";\n  placeholder?: string;\n  persistentPlaceholder?: boolean;\n  required?: boolean;\n  hideMandatory?: boolean;\n  hideNoData?: boolean;\n  hideDetails?: boolean | string;\n  changed?: boolean;\n  loading?: boolean;\n  multiple?: boolean;\n  chips?: boolean;\n  modelValue?: any;\n  items?: (IItem | string)[];\n  itemTitle?: string;\n  itemValue?: string;\n  noDataText?: string;\n  menu?: boolean;\n}\n\nconst CUSTOM_SLOTS = [\"prepend-item\", \"append-item\", \"no-data\"];\n\nexport const useSelect = (\n  props: IListProps,\n  emit: {\n    (event: \"update:modelValue\", value: any): void;\n    (event: \"update:menu\", value: boolean): void;\n  },\n  componentClass: string,\n) => {\n  const getItemValue = (item: IItem | string) =>\n    typeof item === \"string\" ? item : item[props.itemValue as keyof IItem];\n  const getItemTitle = (item: IItem | string) =>\n    typeof item === \"string\" ? item : item[props.itemTitle as keyof IItem];\n\n  const slotsList = useSlots();\n  const localMenu = ref(false);\n  const selection = ref<any>([]);\n  const slots = Object.entries(slotsList).filter(\n    ([slotName]) => !CUSTOM_SLOTS.includes(slotName),\n  );\n  const showChips = computed(\n    () => localMenu.value && props.multiple && selection.value.length,\n  );\n  const removeItem = (item: IItem) => {\n    if (props.multiple) {\n      const value = getItemValue(item);\n      return updateSelection(\n        (selection.value as any[]).filter((itemValue) => itemValue !== value),\n      );\n    }\n    updateSelection(undefined);\n  };\n\n  const updateSelection = (selected?: any) => {\n    selection.value = selected;\n    emit(\"update:modelValue\", selected);\n  };\n\n  const selectedItems = computed(() => {\n    if (Array.isArray(selection.value)) {\n      return props.items?.filter((item) =>\n        (selection.value as any[]).includes(getItemValue(item)),\n      );\n    }\n\n    return [];\n  });\n\n  watchEffect(() => {\n    if (props.multiple) {\n      selection.value = Array.isArray(props.modelValue)\n        ? [...props.modelValue]\n        : [];\n    } else {\n      selection.value = props.modelValue ? props.modelValue : null;\n    }\n  });\n\n  watch(localMenu, (value) => emit(\"update:menu\", value));\n  watch(\n    () => props.menu,\n    (value) => {\n      localMenu.value = Boolean(value);\n    },\n    { immediate: true },\n  );\n\n  const updatedProps = computed(() => ({\n    closableChips: true,\n    ...props,\n    class: [\n      componentClass,\n      \"a-input\",\n      {\n        \"v-input--filled\": !props.transparent,\n        \"a-input--changed\": props.changed,\n        \"a-input--required\":\n          !props.hideMandatory && props.required && !props.readonly,\n        [`${componentClass}--hide-selection`]: showChips.value,\n      },\n    ],\n    variant: props.readonly ? \"plain\" : props.variant,\n    placeholder: props.readonly ? MESSAGES.MANDATORY_FIELD : props.placeholder,\n    persistentPlaceholder: props.readonly || props.persistentPlaceholder,\n    menuIcon: props.readonly ? \"\" : \"$dropdown\",\n    modelValue: selection.value,\n    menu: localMenu.value,\n    noDataText: props.noDataText ?? MESSAGES.LIST_IS_EMPTY,\n    centerAffix: false,\n  }));\n\n  return {\n    localMenu,\n    selection,\n    slotsList,\n    slots,\n    showChips,\n    updatedProps,\n\n    getItemTitle,\n    removeItem,\n    updateSelection,\n    selectedItems,\n  };\n};\n"],"names":["computed","style","_createBlock"],"mappings":"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}